#pragma once

#cmakedefine VAST_ENABLE_ASSERTIONS
#cmakedefine VAST_HAVE_GPERFTOOLS
#cmakedefine VAST_HAVE_PCAP
#cmakedefine VAST_HAVE_ARROW
#cmakedefine VAST_HAVE_BROCCOLI
#cmakedefine VAST_MEASUREMENT_MUTEX_WORKAROUND
#cmakedefine VAST_USE_TCMALLOC
#cmakedefine VAST_USE_OPENCL
#cmakedefine VAST_USE_OPENSSL
#define VAST_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@"
#define VAST_VERSION "@VAST_VERSION"

#include <caf/config.hpp>

#define VAST_LOG_LEVEL CAF_LOG_LEVEL_@VAST_LOG_LEVEL@

#if defined(CAF_CLANG)
#  define VAST_CLANG
#  define VAST_DIAGNOSTIC_PUSH  _Pragma("clang diagnostic push")
#  define VAST_DIAGNOSTIC_POP   _Pragma("clang diagnostic pop")
#  define VAST_DIAGNOSTIC_IGNORE_DEPRECATED                                 \
     _Pragma("clang diagnostic ignored \"-Wdeprecated\"")
#  define VAST_DIAGNOSTIC_IGNORE_VLA_EXTENSION                              \
     _Pragma("clang diagnostic ignored \"-Wvla-extension\"")
#elif defined(CAF_GCC)
#  define VAST_GCC
#  define VAST_DIAGNOSTIC_PUSH  _Pragma("GCC diagnostic push")
#  define VAST_DIAGNOSTIC_POP   _Pragma("GCC diagnostic pop")
#  define VAST_DIAGNOSTIC_IGNORE_DEPRECATED                                 \
     _Pragma("GCC diagnostic ignored \"-Wdeprecated\"")
#  define VAST_DIAGNOSTIC_IGNORE_VLA_EXTENSION                              \
     _Pragma("GCC diagnostic ignored \"-Wvla\"")
#endif

#if defined(CAF_MACOS)
#  define VAST_MACOS
#elif defined(CAF_LINUX)
#  define VAST_LINUX
#elif defined(CAF_BSD)
#  define VAST_BSD
#elif defined(CAF_WINDOWS)
#  define VAST_WINDOWS
#else
#  error platform not supported
#endif
#ifdef CAF_POSIX
#  define VAST_POSIX
#endif

#ifdef CAF_NO_EXCEPTIONS
#define VAST_NO_EXCEPTIONS
#endif

// Convenience macros
#define VAST_IGNORE_UNUSED(x) CAF_IGNORE_UNUSED(x)

